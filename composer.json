{
  "name": "evansims/openfga-laravel",
  "description": "Stop writing authorization logic. Start asking questions. OpenFGA high performance relationship-based access control for Laravel.",
  "license": "Apache-2.0",
  "type": "library",
  "keywords": [
    "openfga",
    "authorization",
    "fine-grained-authorization",
    "access-control",
    "permissions",
    "rbac",
    "abac",
    "relationship-based-access-control",
    "zanzibar",
    "auth0-fga",
    "security",
    "authentication",
    "policy-engine",
    "observability",
    "opentelemetry"
  ],
  "authors": [
    {
      "name": "Evan Sims",
      "homepage": "https://evansims.com"
    }
  ],
  "homepage": "https://github.com/evansims/openfga-laravel",
  "support": {
    "issues": "https://github.com/evansims/openfga-laravel/issues",
    "source": "https://github.com/evansims/openfga-laravel",
    "docs": "https://github.com/evansims/openfga-laravel#readme"
  },
  "require": {
    "php": "^8.3",
    "evansims/openfga-php": "^1",
    "illuminate/contracts": "^12",
    "illuminate/support": "^12"
  },
  "require-dev": {
    "barryvdh/laravel-ide-helper": "^3.5",
    "ergebnis/composer-normalize": "^2",
    "friendsofphp/php-cs-fixer": "^3",
    "orchestra/testbench": "^10.4.0",
    "pestphp/pest": "^3",
    "pestphp/pest-plugin-arch": "^3.1",
    "pestphp/pest-plugin-laravel": "^3",
    "phpstan/phpstan": "^2",
    "phpstan/phpstan-strict-rules": "^2",
    "rector/rector": "^2",
    "vimeo/psalm": "^6",
    "wikimedia/composer-merge-plugin": "^2"
  },
  "minimum-stability": "stable",
  "prefer-stable": true,
  "autoload": {
    "psr-4": {
      "OpenFGA\\Laravel\\": "src/"
    }
  },
  "autoload-dev": {
    "psr-4": {
      "OpenFGA\\Laravel\\Tests\\": "tests/"
    },
    "files": [
      "src/Helpers.php"
    ]
  },
  "config": {
    "allow-plugins": {
      "ergebnis/composer-normalize": true,
      "pestphp/pest-plugin": true,
      "wikimedia/composer-merge-plugin": true
    },
    "optimize-autoloader": true,
    "preferred-install": "dist",
    "process-timeout": 0,
    "sort-packages": true
  },
  "extra": {
    "laravel": {
      "aliases": {
        "OpenFga": "OpenFGA\\Laravel\\Facades\\OpenFga"
      },
      "providers": [
        "OpenFGA\\Laravel\\OpenFgaServiceProvider"
      ]
    },
    "merge-plugin": {
      "ignore-duplicates": false,
      "include": [
        "composer.local.json"
      ],
      "merge-dev": true,
      "merge-extra": false,
      "merge-extra-deep": false,
      "merge-scripts": true,
      "recurse": true,
      "replace": true
    }
  },
  "scripts": {
    "docker:build": [
      "./tools/build-slim-image.sh"
    ],
    "docker:push": [
      "echo 'Test images are built as needed during CI workflows.'",
      "echo 'For manual builds, use: composer docker:build'"
    ],
    "docker:pull": [
      "echo 'Test images are built locally as needed.'",
      "echo 'For manual builds, use: composer docker:build'"
    ],
    "lint": [
      "@lint:phpstan",
      "@lint:psalm",
      "@lint:rector",
      "@lint:phpcs"
    ],
    "lint:fix": [
      "@lint:rector:fix",
      "@lint:phpcs:fix"
    ],
    "lint:phpcs": [
      "@putenv PHP_CS_FIXER_IGNORE_ENV=1",
      "@php vendor/bin/php-cs-fixer fix --dry-run --diff"
    ],
    "lint:phpcs:fix": [
      "@putenv PHP_CS_FIXER_IGNORE_ENV=1",
      "@php vendor/bin/php-cs-fixer fix"
    ],
    "lint:phpstan": "@php vendor/bin/phpstan analyze",
    "lint:psalm": "@php vendor/bin/psalm",
    "lint:rector": "@php vendor/bin/rector process src --dry-run",
    "lint:rector:fix": "@php vendor/bin/rector process src",
    "test": [
      "@test:lint",
      "@test:unit",
      "@test:integration"
    ],
    "test:integration": "./tools/run-integration-tests.sh",
    "test:integration:cached": [
      "echo 'Using existing local image without rebuilding...'",
      "docker-compose -f docker-compose.integration.yml run --rm test"
    ],
    "test:integration:ci": [
      "echo 'CI tests now build images during the workflow for testing latest code.'",
      "echo 'See .github/workflows/integration-tests.yml'"
    ],
    "test:integration:clean": "./tools/integration-cleanup.sh",
    "test:integration:clean:force": [
      "./tools/integration-cleanup.sh",
      "docker ps -a --filter label=com.openfga.test=integration -q | xargs -r docker rm -f",
      "docker network prune -f --filter label=com.openfga.test"
    ],
    "test:integration:debug": "./tools/debug-integration-tests.sh",
    "test:integration:run": [
      "@putenv XDEBUG_MODE=coverage",
      "@php -d memory_limit=2G vendor/bin/pest --colors=always --testsuite integration --strict-global-state --fail-on-risky --fail-on-warning --coverage --strict-coverage --compact --coverage-cobertura coverage/cobertura.xml --log-junit junit.xml"
    ],
    "test:integration:shell": "docker compose -f docker-compose.integration.yml run --rm test sh",
    "test:integration:start": [
      "docker compose -f docker-compose.integration.yml up -d openfga otel-collector"
    ],
    "test:integration:stop": [
      "docker compose -f docker-compose.integration.yml stop"
    ],
    "test:unit": [
      "@php -d memory_limit=2G vendor/bin/pest --colors=always --testsuite unit --strict-global-state --fail-on-risky --fail-on-warning --compact"
    ],
    "test:unit:profile": [
      "@php -d memory_limit=2G vendor/bin/pest --colors=always --testsuite unit --profile --strict-global-state --fail-on-risky --fail-on-warning --compact"
    ],
    "test:unit:coverage": [
      "@putenv XDEBUG_MODE=coverage",
      "@php -d memory_limit=2G vendor/bin/pest --colors=always --testsuite unit --strict-global-state --fail-on-risky --fail-on-warning --coverage --strict-coverage --compact --coverage-cobertura coverage/cobertura.xml --log-junit junit.xml"
    ],
    "test:example": [
      "@php vendor/bin/pest --colors=always --testsuite example"
    ]
  }
}
