# syntax=docker/dockerfile:1
# Slim single-stage build optimized for size
# Enable BuildKit for better caching: DOCKER_BUILDKIT=1 docker build .

FROM php:8.3-cli-alpine

# Install Composer from official image
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Install only essential runtime dependencies and PHP extensions
RUN --mount=type=cache,target=/var/cache/apk \
    set -eux; \
    # Add runtime dependencies
    apk add --no-cache \
        curl \
        postgresql-libs \
        sqlite-libs \
        libzip \
        icu-libs; \
    # Add build dependencies temporarily
    apk add --no-cache --virtual .build-deps \
        $PHPIZE_DEPS \
        postgresql-dev \
        sqlite-dev \
        libzip-dev \
        icu-dev; \
    # Install minimal PHP extensions
    docker-php-ext-install -j$(nproc) \
        pdo_mysql \
        pdo_pgsql \
        pdo_sqlite \
        zip \
        intl \
        opcache; \
    # Install PCOV for code coverage
    pecl install pcov; \
    docker-php-ext-enable pcov; \
    # Clean up build dependencies
    apk del .build-deps; \
    docker-php-source delete; \
    rm -rf /tmp/* /var/cache/apk/*

# Configure PHP
RUN { \
        echo 'memory_limit=256M'; \
        echo 'pcov.enabled=1'; \
        echo 'pcov.directory=/app/src'; \
    } > /usr/local/etc/php/conf.d/app.ini

WORKDIR /app

# Copy composer files first for better caching
COPY composer.json composer.lock ./

# Install dependencies (including dev for tests)
RUN --mount=type=cache,target=/root/.composer/cache \
    composer install \
        --no-interaction \
        --no-scripts \
        --prefer-dist \
        --optimize-autoloader && \
    # Save vendor for volume mount scenario
    cp -r vendor /app-vendor

# Copy only necessary application files
COPY --chown=www-data:www-data src/ src/
COPY --chown=www-data:www-data config/ config/
COPY --chown=www-data:www-data tests/ tests/
COPY --chown=www-data:www-data phpunit.xml ./

# Create minimal wait script
RUN printf '#!/bin/sh\n\
set -e\n\
[ ! -d "/app/vendor" ] && cp -r /app-vendor /app/vendor\n\
timeout=60\n\
until curl -sf http://openfga:8080/healthz | grep -q SERVING; do\n\
  [ $((timeout-=2)) -le 0 ] && exit 1\n\
  sleep 2\n\
done\n\
exec php vendor/bin/pest --colors=always tests/Integration\n' > /start.sh && chmod +x /start.sh

USER www-data
CMD ["/start.sh"]