includes:
    - vendor/phpstan/phpstan-strict-rules/rules.neon

parameters:
    level: max
    treatPhpDocTypesAsCertain: false
    inferPrivatePropertyTypeFromConstructor: true

    # Enhanced strict analysis
    checkMissingCallableSignature: true
    checkUninitializedProperties: true
    polluteScopeWithLoopInitialAssignments: false
    polluteScopeWithAlwaysIterableForeach: false

    # Modern PHP best practices
    checkExplicitMixedMissingReturn: true
    checkFunctionNameCase: true
    checkInternalClassCaseSensitivity: true
    checkTooWideReturnTypesInProtectedAndPublicMethods: true

    # Readonly properties support (PHP 8.1+)
    checkDynamicProperties: true

    ignoreErrors:
        # Dynamic method calls are expected for proxy pattern
        - '#Variable method call on OpenFGA\\ClientInterface#'
        # PSR discovery - PHPStan can't determine runtime class checks
        - '#Call to function method_exists\(\) with .* will always evaluate to false#'
        # Trait is provided for users to apply to their models
        - '#Trait OpenFGA\\Laravel\\Traits\\HasAuthorization is used zero times and is not analysed#'
        # Laravel wrapper proxies expand method with different signature
        - '#Parameter \#2 \$tuple of method OpenFGA\\ClientInterface::expand\(\) expects OpenFGA\\Models\\TupleKeyInterface, string given#'
        # Laravel wrapper proxies check method with different signature
        - '#Parameter \#3 \$tuple of method OpenFGA\\ClientInterface::check\(\) expects OpenFGA\\Models\\TupleKeyInterface, string given#'

    paths:
        - src
