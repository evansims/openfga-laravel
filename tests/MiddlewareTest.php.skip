<?php

declare(strict_types=1);

use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Illuminate\Routing\Route;
use Illuminate\Support\Facades\Auth;
use OpenFGA\Laravel\Http\Middleware\OpenFgaMiddleware;
use OpenFGA\Laravel\Http\Middleware\RequiresAnyPermission;
use OpenFGA\Laravel\Http\Middleware\RequiresAllPermissions;
use OpenFGA\Laravel\Http\Middleware\RequiresPermission;
use OpenFGA\Laravel\OpenFgaManager;
use Symfony\Component\HttpFoundation\Response;

// Test model for middleware tests
class TestMiddlewareModel extends Model
{
    protected $table = 'test_models';
    protected $fillable = ['id', 'name'];
    
    public function authorizationObject(): string
    {
        return 'test_model:' . $this->id;
    }
    
    public function authorizationType(): string
    {
        return 'test_model';
    }
}

// Test user model
class TestMiddlewareUser extends Model
{
    protected $table = 'users';
    protected $fillable = ['id', 'name'];
    
    public function getAuthIdentifier()
    {
        return $this->id;
    }
    
    public function authorizationUser(): string
    {
        return 'user:' . $this->id;
    }
}

// Test stub for OpenFgaManager
class TestOpenFgaManager
{
    public array $checkResults = [];
    
    public function connection(?string $name = null): self
    {
        return $this;
    }
    
    public function check(string $user, string $relation, string $object, array $contextualTuples = [], array $context = [], ?string $connection = null): bool
    {
        $key = "{$user}:{$relation}:{$object}";
        return $this->checkResults[$key] ?? false;
    }
}

describe('OpenFGA Middleware', function (): void {
    beforeEach(function (): void {
        // Use test stub for cleaner testing
        $this->manager = new TestOpenFgaManager();
        
        // Mock Auth facade
        Auth::shouldReceive('check')->andReturn(true);
        $this->user = new TestMiddlewareUser(['id' => 123, 'name' => 'Test User']);
        Auth::shouldReceive('user')->andReturn($this->user);
        
        $this->middleware = new OpenFgaMiddleware($this->manager);
    });

    describe('Basic Permission Middleware', function (): void {
        it('allows access when permission is granted', function (): void {
            $this->manager->checkResults['user:123:read:document:456'] = true;
            
            $request = Request::create('/test');
            $request->setUserResolver(function () {
                return $this->user;
            });
            
            $response = $this->middleware->handle(
                $request,
                function ($req) {
                    return new Response('Success', 200);
                },
                'read',
                'document:456'
            );
            
            expect($response->getStatusCode())->toBe(200);
            expect($response->getContent())->toBe('Success');
        });

        it('denies access when permission is not granted', function (): void {
            $this->manager->checkResults['user:123:read:document:456'] = false;
            
            $request = Request::create('/test');
            $request->setUserResolver(function () {
                return $this->user;
            });
            
            expect(function () {
                $this->middleware->handle(
                    $request,
                    function ($req) {
                        return new Response('Success', 200);
                    },
                    'read',
                    'document:456'
                );
            })->toThrow(Symfony\Component\HttpKernel\Exception\HttpException::class);
        });

        it('resolves object from route parameters', function (): void {
            $model = new TestMiddlewareModel(['id' => 456, 'name' => 'Test Model']);
            
            $route = new Route(['GET'], '/test/{model}', []);
            $route->bind($request = Request::create('/test/456'));
            $route->setParameter('model', $model);
            $request->setRouteResolver(function () use ($route) {
                return $route;
            });
            $request->setUserResolver(function () {
                return $this->user;
            });
            
            $this->manager->checkResults['user:123:read:test_model:456'] = true;
            
            $response = $this->middleware->handle(
                $request,
                function ($req) {
                    return new Response('Success', 200);
                },
                'read'
            );
            
            expect($response->getStatusCode())->toBe(200);
        });

        it('requires authentication', function (): void {
            Auth::shouldReceive('check')->andReturn(false);
            
            $request = Request::create('/test');
            
            expect(function () {
                $this->middleware->handle(
                    $request,
                    function ($req) {
                        return new Response('Success', 200);
                    },
                    'read',
                    'document:456'
                );
            })->toThrow(Symfony\Component\HttpKernel\Exception\HttpException::class);
        });
    });

    describe('RequiresPermission Middleware', function (): void {
        it('works with simplified interface', function (): void {
            $middleware = new RequiresPermission($this->manager);
            $this->manager->checkResults['user:123:write:document:789'] = true;
            
            $request = Request::create('/test');
            $request->setUserResolver(function () {
                return $this->user;
            });
            
            $response = $middleware->handle(
                $request,
                function ($req) {
                    return new Response('Success', 200);
                },
                'write',
                'document:789'
            );
            
            expect($response->getStatusCode())->toBe(200);
        });
    });

    describe('RequiresAnyPermission Middleware', function (): void {
        it('allows access when any permission is granted', function (): void {
            $middleware = new RequiresAnyPermission($this->manager);
            
            $model = new TestMiddlewareModel(['id' => 789, 'name' => 'Test Model']);
            $route = new Route(['GET'], '/test/{model}', []);
            $route->bind($request = Request::create('/test/789'));
            $route->setParameter('model', $model);
            $request->setRouteResolver(function () use ($route) {
                return $route;
            });
            $request->setUserResolver(function () {
                return $this->user;
            });
            
            // User has 'read' but not 'write' or 'delete'
            $this->manager->checkResults['user:123:read:test_model:789'] = true;
            $this->manager->checkResults['user:123:write:test_model:789'] = false;
            $this->manager->checkResults['user:123:delete:test_model:789'] = false;
            
            $response = $middleware->handle(
                $request,
                function ($req) {
                    return new Response('Success', 200);
                },
                'read',
                'write',
                'delete'
            );
            
            expect($response->getStatusCode())->toBe(200);
        });

        it('denies access when no permissions are granted', function (): void {
            $middleware = new RequiresAnyPermission($this->manager);
            
            $model = new TestMiddlewareModel(['id' => 789, 'name' => 'Test Model']);
            $route = new Route(['GET'], '/test/{model}', []);
            $route->bind($request = Request::create('/test/789'));
            $route->setParameter('model', $model);
            $request->setRouteResolver(function () use ($route) {
                return $route;
            });
            $request->setUserResolver(function () {
                return $this->user;
            });
            
            // User has none of the required permissions
            $this->manager->checkResults['user:123:read:test_model:789'] = false;
            $this->manager->checkResults['user:123:write:test_model:789'] = false;
            $this->manager->checkResults['user:123:delete:test_model:789'] = false;
            
            expect(function () use ($middleware, $request) {
                $middleware->handle(
                    $request,
                    function ($req) {
                        return new Response('Success', 200);
                    },
                    'read',
                    'write',
                    'delete'
                );
            })->toThrow(Symfony\Component\HttpKernel\Exception\HttpException::class);
        });
    });

    describe('RequiresAllPermissions Middleware', function (): void {
        it('allows access when all permissions are granted', function (): void {
            $middleware = new RequiresAllPermissions($this->manager);
            
            $model = new TestMiddlewareModel(['id' => 999, 'name' => 'Test Model']);
            $route = new Route(['GET'], '/test/{model}', []);
            $route->bind($request = Request::create('/test/999'));
            $route->setParameter('model', $model);
            $request->setRouteResolver(function () use ($route) {
                return $route;
            });
            $request->setUserResolver(function () {
                return $this->user;
            });
            
            // User has all required permissions
            $this->manager->checkResults['user:123:read:test_model:999'] = true;
            $this->manager->checkResults['user:123:write:test_model:999'] = true;
            
            $response = $middleware->handle(
                $request,
                function ($req) {
                    return new Response('Success', 200);
                },
                'read',
                'write'
            );
            
            expect($response->getStatusCode())->toBe(200);
        });

        it('denies access when some permissions are missing', function (): void {
            $middleware = new RequiresAllPermissions($this->manager);
            
            $model = new TestMiddlewareModel(['id' => 999, 'name' => 'Test Model']);
            $route = new Route(['GET'], '/test/{model}', []);
            $route->bind($request = Request::create('/test/999'));
            $route->setParameter('model', $model);
            $request->setRouteResolver(function () use ($route) {
                return $route;
            });
            $request->setUserResolver(function () {
                return $this->user;
            });
            
            // User has read but not write
            $this->manager->checkResults['user:123:read:test_model:999'] = true;
            $this->manager->checkResults['user:123:write:test_model:999'] = false;
            
            expect(function () use ($middleware, $request) {
                $middleware->handle(
                    $request,
                    function ($req) {
                        return new Response('Success', 200);
                    },
                    'read',
                    'write'
                );
            })->toThrow(Symfony\Component\HttpKernel\Exception\HttpException::class);
        });
    });

    describe('Object Resolution', function (): void {
        it('resolves objects from model parameters', function (): void {
            $model = new TestMiddlewareModel(['id' => 123, 'name' => 'Test']);
            
            $route = new Route(['GET'], '/test/{model}', []);
            $route->bind($request = Request::create('/test/123'));
            $route->setParameter('model', $model);
            $request->setRouteResolver(function () use ($route) {
                return $route;
            });
            $request->setUserResolver(function () {
                return $this->user;
            });
            
            $this->manager->checkResults['user:123:read:test_model:123'] = true;
            
            $response = $this->middleware->handle(
                $request,
                function ($req) {
                    return new Response('Success', 200);
                },
                'read'
            );
            
            expect($response->getStatusCode())->toBe(200);
        });

        it('infers object type from parameter names', function (): void {
            $route = new Route(['GET'], '/documents/{document_id}', []);
            $route->bind($request = Request::create('/documents/456'));
            $route->setParameter('document_id', '456');
            $request->setRouteResolver(function () use ($route) {
                return $route;
            });
            $request->setUserResolver(function () {
                return $this->user;
            });
            
            $this->manager->checkResults['user:123:read:document:456'] = true;
            
            $response = $this->middleware->handle(
                $request,
                function ($req) {
                    return new Response('Success', 200);
                },
                'read'
            );
            
            expect($response->getStatusCode())->toBe(200);
        });
    });
});