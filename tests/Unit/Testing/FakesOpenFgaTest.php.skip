<?php

declare(strict_types=1);

use OpenFGA\Laravel\OpenFgaManager;
use OpenFGA\Laravel\Testing\FakesOpenFga;
use OpenFGA\Laravel\Tests\TestCase;
use PHPUnit\Framework\AssertionFailedError;

covers(FakesOpenFga::class);

describe('FakesOpenFga', function () {
    describe('assertions', function () {
        describe('assertNoPermissionChecks', function () {
            it('fails when checks performed', function () {
                $fake = $this->fakeOpenFga();
                $fake->check('user:1', 'reader', 'document:1');

                expect(fn () => $this->assertNoPermissionChecks())
                    ->toThrow(AssertionFailedError::class);
            });

            it('passes when no checks performed', function () {
                $this->fakeOpenFga();

                // Should not throw
                expect(function () {
                    $this->assertNoPermissionChecks();
                })->not->toThrow(\Exception::class);
            });
        });

        describe('assertPermissionCheckCount', function () {
            it('fails with wrong count', function () {
                $fake = $this->fakeOpenFga();
                $fake->check('user:1', 'reader', 'document:1');

                expect(fn () => $this->assertPermissionCheckCount(2))
                    ->toThrow(AssertionFailedError::class);
            });

            it('passes with correct count', function () {
                $fake = $this->fakeOpenFga();
                $fake->check('user:1', 'reader', 'document:1');
                $fake->check('user:1', 'writer', 'document:1');

                // Should not throw
                expect(function () {
                    $this->assertPermissionCheckCount(2);
                })->not->toThrow(\Exception::class);
            });
        });

        describe('assertPermissionChecked', function () {
            it('fails when not checked', function () {
                $this->fakeOpenFga();

                expect(fn () => $this->assertPermissionChecked('user:1', 'reader', 'document:1'))
                    ->toThrow(AssertionFailedError::class);
            });

            it('passes when checked', function () {
                $fake = $this->fakeOpenFga();
                $fake->check('user:1', 'reader', 'document:1');

                // Should not throw
                expect(function () {
                    $this->assertPermissionChecked('user:1', 'reader', 'document:1');
                })->not->toThrow(\Exception::class);
            });
        });

        describe('assertPermissionGranted', function () {
            it('fails when not granted', function () {
                $this->fakeOpenFga();

                expect(fn () => $this->assertPermissionGranted('user:1', 'reader', 'document:1'))
                    ->toThrow(AssertionFailedError::class);
            });

            it('passes when granted', function () {
                $fake = $this->fakeOpenFga();
                $fake->grant('user:1', 'reader', 'document:1');

                // Should not throw
                expect(function () {
                    $this->assertPermissionGranted('user:1', 'reader', 'document:1');
                })->not->toThrow(\Exception::class);
            });
        });

        describe('assertPermissionNotChecked', function () {
            it('fails when checked', function () {
                $fake = $this->fakeOpenFga();
                $fake->check('user:1', 'reader', 'document:1');

                expect(fn () => $this->assertPermissionNotChecked('user:1', 'reader', 'document:1'))
                    ->toThrow(AssertionFailedError::class);
            });

            it('passes when not checked', function () {
                $this->fakeOpenFga();

                // Should not throw
                expect(function () {
                    $this->assertPermissionNotChecked('user:1', 'reader', 'document:1');
                })->not->toThrow(\Exception::class);
            });
        });

        describe('assertPermissionNotGranted', function () {
            it('fails when granted', function () {
                $fake = $this->fakeOpenFga();
                $fake->grant('user:1', 'reader', 'document:1');

                expect(fn () => $this->assertPermissionNotGranted('user:1', 'reader', 'document:1'))
                    ->toThrow(AssertionFailedError::class);
            });

            it('passes when not granted', function () {
                $this->fakeOpenFga();

                // Should not throw
                expect(function () {
                    $this->assertPermissionNotGranted('user:1', 'reader', 'document:1');
                })->not->toThrow(\Exception::class);
            });
        });

        it('assertions fail when fake not active', function () {
            expect(fn () => $this->assertPermissionGranted('user:1', 'reader', 'document:1'))
                ->toThrow(AssertionFailedError::class, 'OpenFGA fake is not active. Call fakeOpenFga() first.');
        });
    });

    describe('manager integration', function () {
        it('can expand through manager', function () {
            $fake = $this->fakeOpenFga();
            $manager = app(OpenFgaManager::class);

            $fake->grant('user:1', 'reader', 'document:1');
            $fake->grant('user:2', 'reader', 'document:1');

            $expansion = $manager->expand('document:1', 'reader');

            expect($expansion)->toHaveKey('tree');
            $users = $expansion['tree']['root']['leaf']['users'];
            expect($users)->toHaveCount(2);
            expect($users)->toContain('user:1');
            expect($users)->toContain('user:2');
        });

        it('can fake openfga manager', function () {
            $fake = $this->fakeOpenFga();

            expect($fake)->not->toBeNull();
            expect($fake)->toBe($this->getFakeOpenFga());

            // Test that the manager is properly replaced (we expect an anonymous class now)
            $manager = app(OpenFgaManager::class);
            expect($manager)->not->toBeNull();

            // Test that it responds to expected methods
            expect(method_exists($manager, 'check'))->toBeTrue();
            expect(method_exists($manager, 'grant'))->toBeTrue();
            expect(method_exists($manager, 'revoke'))->toBeTrue();
        });

        it('can grant and revoke through manager', function () {
            $fake = $this->fakeOpenFga();
            $manager = app(OpenFgaManager::class);

            // Grant through manager
            $manager->grant('user:1', 'reader', 'document:1');

            // Verify through fake
            expect($fake->check('user:1', 'reader', 'document:1'))->toBeTrue();

            // Revoke through manager
            $manager->revoke('user:1', 'reader', 'document:1');

            // Verify through fake
            expect($fake->check('user:1', 'reader', 'document:1'))->toBeFalse();
        });

        it('can list objects through manager', function () {
            $fake = $this->fakeOpenFga();
            $manager = app(OpenFgaManager::class);

            $fake->grant('user:1', 'reader', 'document:1');
            $fake->grant('user:1', 'reader', 'document:2');

            $objects = $manager->listObjects('user:1', 'reader', 'document');

            expect($objects)->toHaveCount(2);
            expect($objects)->toContain('document:1');
            expect($objects)->toContain('document:2');
        });

        it('can test permissions through manager', function () {
            $fake = $this->fakeOpenFga();
            $manager = app(OpenFgaManager::class);

            // Grant permission through fake
            $fake->grant('user:1', 'reader', 'document:1');

            // Check through manager (should delegate to fake)
            expect($manager->check('user:1', 'reader', 'document:1'))->toBeTrue();
            expect($manager->check('user:1', 'writer', 'document:1'))->toBeFalse();
        });

        it('can write batch through manager', function () {
            $fake = $this->fakeOpenFga();
            $manager = app(OpenFgaManager::class);

            $writes = [
                ['user' => 'user:1', 'relation' => 'reader', 'object' => 'document:1'],
            ];

            $manager->writeBatch($writes);

            expect($fake->check('user:1', 'reader', 'document:1'))->toBeTrue();
            expect($fake->getWrites())->toHaveCount(1);
        });
    });
});
