name: Build Test Image

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile.integration'
      - 'composer.json'
      - 'composer.lock'
      - '.github/workflows/build-test-image.yml'
  workflow_dispatch:
  schedule:
    # Rebuild weekly to get security updates
    - cron: '0 0 * * 0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-integration-tests

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile.integration
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-${{ github.sha }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # BuildKit is enabled by default in build-push-action
        # Maximum compression for smaller image size
        outputs: type=image,push=true,compression=gzip,compression-level=9

    - name: Optimize with Docker Slim
      run: |
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-${{ github.sha }}
        
        # Pull Docker Slim
        docker pull dslim/slim:latest
        
        # Try Docker Slim with sensor disabled (most compatible)
        if docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          dslim/slim:latest build \
          --target ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-${{ github.sha }} \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:slim-${{ github.sha }} \
          --http-probe=false \
          --continue-after=0 \
          --include-path=/app \
          --include-path=/usr/local/lib/php \
          --include-path=/usr/local/etc/php \
          --include-path=/usr/local/bin/php \
          --include-path=/usr/bin/composer \
          --include-bin=/usr/bin/curl \
          --include-bin=/bin/sh \
          --include-shell; then
          echo "✅ Docker Slim optimization successful"
        else
          echo "⚠️ Docker Slim failed, trying exec mode..."
          # Fallback to exec mode
          if docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            dslim/slim:latest build \
            --target ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-${{ github.sha }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:slim-${{ github.sha }} \
            --http-probe=false \
            --exec="php -v" \
            --include-path=/app \
            --include-path=/usr/local/lib/php \
            --include-path=/usr/local/etc/php \
            --include-path=/usr/local/bin/php \
            --include-shell; then
            echo "✅ Docker Slim optimization successful with exec mode"
          else
            echo "⚠️ Docker Slim unavailable, using standard optimized image"
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-${{ github.sha }} \
                       ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:slim-${{ github.sha }}
          fi
        fi
    
    - name: Push optimized image
      run: |
        # Push with SHA tag
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:slim-${{ github.sha }}
        
        # Tag and push as latest
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:slim-${{ github.sha }} \
                   ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Show final size
        echo "Final image size:"
        docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format "Size: {{.Size}}"